From 168404215d476ac686d1464724e9a4d041179bab Mon Sep 17 00:00:00 2001
From: TatWai Chong <tatwai.chong@linaro.org>
Date: Wed, 31 Aug 2016 22:39:48 +0800
Subject: [PATCH 1/6] ARM64: Add crc32 instruction feature support.

Origin author : Tim Zhang <tim.zhang@linaro.org>

Test: m test-art-target
      m test-art-target-gtest-instruction_set_features_test

Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
---
 .../arch/arm64/instruction_set_features_arm64.cc   | 99 ++++++++++++++++++++--
 .../arch/arm64/instruction_set_features_arm64.h    | 38 ++++++++-
 .../arm64/instruction_set_features_arm64_test.cc   | 68 ++++++++++++---
 3 files changed, 185 insertions(+), 20 deletions(-)

diff --git a/runtime/arch/arm64/instruction_set_features_arm64.cc b/runtime/arch/arm64/instruction_set_features_arm64.cc
index e5f6f11326..5eb2bbede8 100644
--- a/runtime/arch/arm64/instruction_set_features_arm64.cc
+++ b/runtime/arch/arm64/instruction_set_features_arm64.cc
@@ -25,12 +25,41 @@
 #include "base/logging.h"
 #include "base/stl_util.h"
 
+#if defined(__aarch64__)
+#include <sys/auxv.h>
+#include <asm/hwcap.h>
+#endif
+
 namespace art {
 
 using android::base::StringPrintf;
 
+static inline bool FindAttrFromCpuInfo(const std::string& str) {
+  std::ifstream in("/proc/cpuinfo");
+  if (!in.fail()) {
+    while (!in.eof()) {
+      std::string line;
+      std::getline(in, line);
+      if (!in.eof()) {
+        if (line.find(str) != std::string::npos) {
+          return true;
+        }
+      }
+    }
+    in.close();
+  } else {
+    LOG(ERROR) << "Failed to open /proc/cpuinfo";
+  }
+  return false;
+}
+
 Arm64FeaturesUniquePtr Arm64InstructionSetFeatures::FromVariant(
     const std::string& variant, std::string* error_msg) {
+  return FromVariant(variant, "armv8.0-a", error_msg);
+}
+
+Arm64FeaturesUniquePtr Arm64InstructionSetFeatures::FromVariant(
+    const std::string& variant, const std::string& extension, std::string* error_msg) {
   // Look for variants that need a fix for a53 erratum 835769.
   static const char* arm64_variants_with_a53_835769_bug[] = {
       // Pessimistically assume all generic CPUs are cortex-a53.
@@ -44,6 +73,19 @@ Arm64FeaturesUniquePtr Arm64InstructionSetFeatures::FromVariant(
       "cortex-a72",
       "cortex-a73",
   };
+
+  static const char* arm64_isa_extension[] = {
+      // default
+      "armv8.0-a",
+      // implies "armv8-a"" and enables compiler support for the ARMv8.1-A architecture extension.
+      // In particular, it enables the "+crc" and "+lse" features.
+      "armv8.1-a",
+      // implies "armv8.1-a" and enables compiler support for the ARMv8.2-A architecture extensions.
+      "armv8.2-a",
+      // implies "armv8.2-a" and enables compiler support for the ARMv8.3-A architecture extensions.
+      "armv8.3-a",
+  };
+
   bool needs_a53_835769_fix = FindVariantInArray(arm64_variants_with_a53_835769_bug,
                                                  arraysize(arm64_variants_with_a53_835769_bug),
                                                  variant);
@@ -68,28 +110,55 @@ Arm64FeaturesUniquePtr Arm64InstructionSetFeatures::FromVariant(
   // The variants that need a fix for 843419 are the same that need a fix for 835769.
   bool needs_a53_843419_fix = needs_a53_835769_fix;
 
+  bool has_crc32 = false;
+  if (FindVariantInArray(arm64_isa_extension, arraysize(arm64_isa_extension), extension)) {
+    // Check to see if variant supports crc32 feature.
+    has_crc32 = GetExtension(extension) > Extension::ARMv80A;
+  } else {
+    std::ostringstream os;
+    os << "Unexpected ISA extension for Arm64: " << extension;
+    *error_msg = os.str();
+    return nullptr;
+  }
+
   return Arm64FeaturesUniquePtr(
-      new Arm64InstructionSetFeatures(needs_a53_835769_fix, needs_a53_843419_fix));
+      new Arm64InstructionSetFeatures(needs_a53_835769_fix, needs_a53_843419_fix, has_crc32));
 }
 
 Arm64FeaturesUniquePtr Arm64InstructionSetFeatures::FromBitmap(uint32_t bitmap) {
   bool is_a53 = (bitmap & kA53Bitfield) != 0;
-  return Arm64FeaturesUniquePtr(new Arm64InstructionSetFeatures(is_a53, is_a53));
+  bool has_crc32 = (bitmap & kCRC32Bitfield) != 0;
+  return Arm64FeaturesUniquePtr(new Arm64InstructionSetFeatures(is_a53, is_a53, has_crc32));
 }
 
 Arm64FeaturesUniquePtr Arm64InstructionSetFeatures::FromCppDefines() {
   const bool is_a53 = true;  // Pessimistically assume all ARM64s are A53s.
-  return Arm64FeaturesUniquePtr(new Arm64InstructionSetFeatures(is_a53, is_a53));
+#if defined(__ARM_FEATURE_CRC32)
+  const bool has_crc32 = true;
+#else
+  const bool has_crc32 = false;
+#endif
+  return Arm64FeaturesUniquePtr(new Arm64InstructionSetFeatures(is_a53, is_a53, has_crc32));
 }
 
 Arm64FeaturesUniquePtr Arm64InstructionSetFeatures::FromCpuInfo() {
+  // Look in /proc/cpuinfo for features we need.  Only use this when we can guarantee that
+  // the kernel puts the appropriate feature flags in here.  Sometimes it doesn't.
   const bool is_a53 = true;  // Conservative default.
-  return Arm64FeaturesUniquePtr(new Arm64InstructionSetFeatures(is_a53, is_a53));
+  bool has_crc32 = FindAttrFromCpuInfo("crc");
+
+  return Arm64FeaturesUniquePtr(new Arm64InstructionSetFeatures(is_a53, is_a53, has_crc32));
 }
 
 Arm64FeaturesUniquePtr Arm64InstructionSetFeatures::FromHwcap() {
   const bool is_a53 = true;  // Pessimistically assume all ARM64s are A53s.
-  return Arm64FeaturesUniquePtr(new Arm64InstructionSetFeatures(is_a53, is_a53));
+
+#if defined(__aarch64__)
+  const bool has_crc32 = getauxval(AT_HWCAP) & HWCAP_CRC32 ? true : false;
+#else
+  const bool has_crc32 = false;
+#endif
+  return Arm64FeaturesUniquePtr(new Arm64InstructionSetFeatures(is_a53, is_a53, has_crc32));
 }
 
 Arm64FeaturesUniquePtr Arm64InstructionSetFeatures::FromAssembly() {
@@ -102,12 +171,15 @@ bool Arm64InstructionSetFeatures::Equals(const InstructionSetFeatures* other) co
     return false;
   }
   const Arm64InstructionSetFeatures* other_as_arm64 = other->AsArm64InstructionSetFeatures();
+
   return fix_cortex_a53_835769_ == other_as_arm64->fix_cortex_a53_835769_ &&
-      fix_cortex_a53_843419_ == other_as_arm64->fix_cortex_a53_843419_;
+         fix_cortex_a53_843419_ == other_as_arm64->fix_cortex_a53_843419_ &&
+         has_crc32_ == other_as_arm64->has_crc32_;
 }
 
 uint32_t Arm64InstructionSetFeatures::AsBitmap() const {
-  return (fix_cortex_a53_835769_ ? kA53Bitfield : 0);
+  return (fix_cortex_a53_835769_ ? kA53Bitfield : 0) |
+         (has_crc32_ ? kCRC32Bitfield : 0);
 }
 
 std::string Arm64InstructionSetFeatures::GetFeatureString() const {
@@ -117,6 +189,12 @@ std::string Arm64InstructionSetFeatures::GetFeatureString() const {
   } else {
     result += "-a53";
   }
+  if (has_crc32_) {
+    result += ",crc";
+  } else {
+    result += ",-crc";
+  }
+
   return result;
 }
 
@@ -124,19 +202,24 @@ std::unique_ptr<const InstructionSetFeatures>
 Arm64InstructionSetFeatures::AddFeaturesFromSplitString(
     const std::vector<std::string>& features, std::string* error_msg) const {
   bool is_a53 = fix_cortex_a53_835769_;
+  bool has_crc32 = has_crc32_;
   for (auto i = features.begin(); i != features.end(); i++) {
     std::string feature = android::base::Trim(*i);
     if (feature == "a53") {
       is_a53 = true;
     } else if (feature == "-a53") {
       is_a53 = false;
+    } else if (feature == "crc") {
+      has_crc32 = true;
+    } else if (feature == "-crc") {
+      has_crc32 = false;
     } else {
       *error_msg = StringPrintf("Unknown instruction set feature: '%s'", feature.c_str());
       return nullptr;
     }
   }
   return std::unique_ptr<const InstructionSetFeatures>(
-      new Arm64InstructionSetFeatures(is_a53, is_a53));
+      new Arm64InstructionSetFeatures(is_a53, is_a53, has_crc32));
 }
 
 }  // namespace art
diff --git a/runtime/arch/arm64/instruction_set_features_arm64.h b/runtime/arch/arm64/instruction_set_features_arm64.h
index 4243d32968..5f6a5fd51a 100644
--- a/runtime/arch/arm64/instruction_set_features_arm64.h
+++ b/runtime/arch/arm64/instruction_set_features_arm64.h
@@ -27,9 +27,22 @@ using Arm64FeaturesUniquePtr = std::unique_ptr<const Arm64InstructionSetFeatures
 // Instruction set features relevant to the ARM64 architecture.
 class Arm64InstructionSetFeatures FINAL : public InstructionSetFeatures {
  public:
+  enum Extension {
+    Invalid = -1,
+    ARMv80A = 0,
+    ARMv81A,
+    ARMv82A,
+    ARMv83A,
+  };
+
   // Process a CPU variant string like "krait" or "cortex-a15" and create InstructionSetFeatures.
   static Arm64FeaturesUniquePtr FromVariant(const std::string& variant, std::string* error_msg);
 
+  // Process a CPU variant and ISA extension, and create InstructionSetFeatures.
+  static Arm64FeaturesUniquePtr FromVariant(const std::string& variant,
+                                            const std::string& extension,
+                                            std::string* error_msg);
+
   // Parse a bitmap and create an InstructionSetFeatures.
   static Arm64FeaturesUniquePtr FromBitmap(uint32_t bitmap);
 
@@ -47,6 +60,19 @@ class Arm64InstructionSetFeatures FINAL : public InstructionSetFeatures {
   // InstructionSetFeatures. This works around kernel bugs in AT_HWCAP and /proc/cpuinfo.
   static Arm64FeaturesUniquePtr FromAssembly();
 
+  static Extension GetExtension(const std::string& str) {
+    if (str == "armv8.0-a") {
+      return ARMv80A;
+    } else if (str == "armv8.1-a") {
+      return ARMv81A;
+    } else if (str == "armv8.2-a") {
+      return ARMv82A;
+    } else if (str == "armv8.3-a") {
+      return ARMv83A;
+    }
+    return Invalid;
+  }
+
   bool Equals(const InstructionSetFeatures* other) const OVERRIDE;
 
   InstructionSet GetInstructionSet() const OVERRIDE {
@@ -68,6 +94,11 @@ class Arm64InstructionSetFeatures FINAL : public InstructionSetFeatures {
       return fix_cortex_a53_843419_;
   }
 
+  // Is the crc32 instruction feature enabled?
+  bool HasCRC32Instruction() const {
+      return has_crc32_;
+  }
+
   virtual ~Arm64InstructionSetFeatures() {}
 
  protected:
@@ -77,19 +108,22 @@ class Arm64InstructionSetFeatures FINAL : public InstructionSetFeatures {
                                  std::string* error_msg) const OVERRIDE;
 
  private:
-  Arm64InstructionSetFeatures(bool needs_a53_835769_fix, bool needs_a53_843419_fix)
+  Arm64InstructionSetFeatures(bool needs_a53_835769_fix, bool needs_a53_843419_fix, bool has_crc32)
       : InstructionSetFeatures(),
         fix_cortex_a53_835769_(needs_a53_835769_fix),
-        fix_cortex_a53_843419_(needs_a53_843419_fix) {
+        fix_cortex_a53_843419_(needs_a53_843419_fix),
+        has_crc32_(has_crc32) {
   }
 
   // Bitmap positions for encoding features as a bitmap.
   enum {
     kA53Bitfield = 1 << 0,
+    kCRC32Bitfield = 1 << 1,
   };
 
   const bool fix_cortex_a53_835769_;
   const bool fix_cortex_a53_843419_;
+  const bool has_crc32_;
 
   DISALLOW_COPY_AND_ASSIGN(Arm64InstructionSetFeatures);
 };
diff --git a/runtime/arch/arm64/instruction_set_features_arm64_test.cc b/runtime/arch/arm64/instruction_set_features_arm64_test.cc
index 91cb58fedf..d365eeafa7 100644
--- a/runtime/arch/arm64/instruction_set_features_arm64_test.cc
+++ b/runtime/arch/arm64/instruction_set_features_arm64_test.cc
@@ -23,38 +23,86 @@ namespace art {
 TEST(Arm64InstructionSetFeaturesTest, Arm64Features) {
   // Build features for an ARM64 processor.
   std::string error_msg;
-  std::unique_ptr<const InstructionSetFeatures> arm64_features(
+  std::unique_ptr<const InstructionSetFeatures> arm64_default_features(
       InstructionSetFeatures::FromVariant(kArm64, "default", &error_msg));
-  ASSERT_TRUE(arm64_features.get() != nullptr) << error_msg;
-  EXPECT_EQ(arm64_features->GetInstructionSet(), kArm64);
-  EXPECT_TRUE(arm64_features->Equals(arm64_features.get()));
-  EXPECT_STREQ("a53", arm64_features->GetFeatureString().c_str());
-  EXPECT_EQ(arm64_features->AsBitmap(), 1U);
+  ASSERT_TRUE(arm64_default_features.get() != nullptr) << error_msg;
+  EXPECT_EQ(arm64_default_features->GetInstructionSet(), kArm64);
+  EXPECT_TRUE(arm64_default_features->Equals(arm64_default_features.get()));
+  EXPECT_FALSE(arm64_default_features->AsArm64InstructionSetFeatures()->HasCRC32Instruction());
+  EXPECT_STREQ("a53,-crc", arm64_default_features->GetFeatureString().c_str());
+  EXPECT_EQ(arm64_default_features->AsBitmap(), 1U);
+
+  std::unique_ptr<const InstructionSetFeatures> cortex_a53_features(
+      InstructionSetFeatures::FromVariant(kArm64, "cortex-a53", &error_msg));
+  ASSERT_TRUE(cortex_a53_features.get() != nullptr) << error_msg;
+  EXPECT_EQ(cortex_a53_features->GetInstructionSet(), kArm64);
+  EXPECT_TRUE(cortex_a53_features->Equals(cortex_a53_features.get()));
+  EXPECT_FALSE(cortex_a53_features->AsArm64InstructionSetFeatures()->HasCRC32Instruction());
+  EXPECT_STREQ("a53,-crc", cortex_a53_features->GetFeatureString().c_str());
+  EXPECT_EQ(cortex_a53_features->AsBitmap(), 1U);
+
+  std::unique_ptr<const Arm64InstructionSetFeatures> cortex_a53_crc_features(
+      Arm64InstructionSetFeatures::FromVariant("cortex-a53", "armv8.1-a", &error_msg));
+  ASSERT_TRUE(cortex_a53_crc_features.get() != nullptr) << error_msg;
+  EXPECT_EQ(cortex_a53_crc_features->GetInstructionSet(), kArm64);
+  EXPECT_TRUE(cortex_a53_crc_features->Equals(cortex_a53_crc_features.get()));
+  EXPECT_TRUE(cortex_a53_crc_features->AsArm64InstructionSetFeatures()->HasCRC32Instruction());
+  EXPECT_STREQ("a53,crc", cortex_a53_crc_features->GetFeatureString().c_str());
+  EXPECT_EQ(cortex_a53_crc_features->AsBitmap(), 3U);
+
 
   std::unique_ptr<const InstructionSetFeatures> cortex_a57_features(
       InstructionSetFeatures::FromVariant(kArm64, "cortex-a57", &error_msg));
   ASSERT_TRUE(cortex_a57_features.get() != nullptr) << error_msg;
   EXPECT_EQ(cortex_a57_features->GetInstructionSet(), kArm64);
   EXPECT_TRUE(cortex_a57_features->Equals(cortex_a57_features.get()));
-  EXPECT_STREQ("a53", cortex_a57_features->GetFeatureString().c_str());
+  EXPECT_FALSE(cortex_a57_features->AsArm64InstructionSetFeatures()->HasCRC32Instruction());
+  EXPECT_STREQ("a53,-crc", cortex_a57_features->GetFeatureString().c_str());
   EXPECT_EQ(cortex_a57_features->AsBitmap(), 1U);
 
+  std::unique_ptr<const Arm64InstructionSetFeatures> cortex_a57_crc_features(
+      Arm64InstructionSetFeatures::FromVariant("cortex-a57", "armv8.1-a", &error_msg));
+  ASSERT_TRUE(cortex_a57_crc_features.get() != nullptr) << error_msg;
+  EXPECT_EQ(cortex_a57_crc_features->GetInstructionSet(), kArm64);
+  EXPECT_TRUE(cortex_a57_crc_features->Equals(cortex_a57_crc_features.get()));
+  EXPECT_TRUE(cortex_a57_crc_features->AsArm64InstructionSetFeatures()->HasCRC32Instruction());
+  EXPECT_STREQ("a53,crc", cortex_a57_crc_features->GetFeatureString().c_str());
+  EXPECT_EQ(cortex_a57_crc_features->AsBitmap(), 3U);
+
   std::unique_ptr<const InstructionSetFeatures> cortex_a73_features(
       InstructionSetFeatures::FromVariant(kArm64, "cortex-a73", &error_msg));
   ASSERT_TRUE(cortex_a73_features.get() != nullptr) << error_msg;
   EXPECT_EQ(cortex_a73_features->GetInstructionSet(), kArm64);
   EXPECT_TRUE(cortex_a73_features->Equals(cortex_a73_features.get()));
-  EXPECT_STREQ("a53", cortex_a73_features->GetFeatureString().c_str());
+  EXPECT_STREQ("a53,-crc", cortex_a73_features->GetFeatureString().c_str());
   EXPECT_EQ(cortex_a73_features->AsBitmap(), 1U);
 
+  std::unique_ptr<const Arm64InstructionSetFeatures> cortex_a73_crc_features(
+      Arm64InstructionSetFeatures::FromVariant("cortex-a73", "armv8.1-a", &error_msg));
+  ASSERT_TRUE(cortex_a73_crc_features.get() != nullptr) << error_msg;
+  EXPECT_EQ(cortex_a73_crc_features->GetInstructionSet(), kArm64);
+  EXPECT_TRUE(cortex_a73_crc_features->Equals(cortex_a73_crc_features.get()));
+  EXPECT_TRUE(cortex_a73_crc_features->AsArm64InstructionSetFeatures()->HasCRC32Instruction());
+  EXPECT_STREQ("a53,crc", cortex_a73_crc_features->GetFeatureString().c_str());
+  EXPECT_EQ(cortex_a73_crc_features->AsBitmap(), 3U);
+
   std::unique_ptr<const InstructionSetFeatures> cortex_a35_features(
       InstructionSetFeatures::FromVariant(kArm64, "cortex-a35", &error_msg));
   ASSERT_TRUE(cortex_a35_features.get() != nullptr) << error_msg;
   EXPECT_EQ(cortex_a35_features->GetInstructionSet(), kArm64);
   EXPECT_TRUE(cortex_a35_features->Equals(cortex_a35_features.get()));
-  EXPECT_STREQ("-a53", cortex_a35_features->GetFeatureString().c_str());
+  EXPECT_STREQ("-a53,-crc", cortex_a35_features->GetFeatureString().c_str());
   EXPECT_EQ(cortex_a35_features->AsBitmap(), 0U);
 
+  std::unique_ptr<const Arm64InstructionSetFeatures> cortex_a35_crc_features(
+      Arm64InstructionSetFeatures::FromVariant("cortex-a35", "armv8.1-a", &error_msg));
+  ASSERT_TRUE(cortex_a35_crc_features.get() != nullptr) << error_msg;
+  EXPECT_EQ(cortex_a35_crc_features->GetInstructionSet(), kArm64);
+  EXPECT_TRUE(cortex_a35_crc_features->Equals(cortex_a35_crc_features.get()));
+  EXPECT_TRUE(cortex_a35_crc_features->AsArm64InstructionSetFeatures()->HasCRC32Instruction());
+  EXPECT_STREQ("a53,crc", cortex_a35_crc_features->GetFeatureString().c_str());
+  EXPECT_EQ(cortex_a35_crc_features->AsBitmap(), 3U);
+
   std::unique_ptr<const InstructionSetFeatures> kryo_features(
       InstructionSetFeatures::FromVariant(kArm64, "kryo", &error_msg));
   ASSERT_TRUE(kryo_features.get() != nullptr) << error_msg;
@@ -62,7 +110,7 @@ TEST(Arm64InstructionSetFeaturesTest, Arm64Features) {
   EXPECT_TRUE(kryo_features->Equals(kryo_features.get()));
   EXPECT_TRUE(kryo_features->Equals(cortex_a35_features.get()));
   EXPECT_FALSE(kryo_features->Equals(cortex_a57_features.get()));
-  EXPECT_STREQ("-a53", kryo_features->GetFeatureString().c_str());
+  EXPECT_STREQ("-a53,-crc", kryo_features->GetFeatureString().c_str());
   EXPECT_EQ(kryo_features->AsBitmap(), 0U);
 }
 
-- 
2.14.1

