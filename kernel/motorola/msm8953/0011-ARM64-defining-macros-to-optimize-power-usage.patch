From 9a619c14aa9cd902ab1c01df17a4fdbd54b1602c Mon Sep 17 00:00:00 2001
From: Sumit Singh <sumsingh@nvidia.com>
Date: Fri, 14 Mar 2014 14:20:18 +0530
Subject: [PATCH 11/27] ARM64: defining macros to optimize power usage

Here we have defined some macros such as
cpu_relaxed_read, cpu_relaxed_read_long,
cpu_read_relax in arch/arm64/include/asm/processor.h
which will be used to enhance power optimization on Denver.

bug 1440421

Here we are trying to improve power optimazation
using some macros such

Change-Id: I313e47b35e9a638fe81b7350887f59eeacc45bc1
Signed-off-by: Sumit Singh <sumsingh@nvidia.com>
Reviewed-on: http://git-master/r/381950
Reviewed-by: Automatic_Commit_Validation_User
GVS: Gerrit_Virtual_Submit
Reviewed-by: Sri Krishna Chowdary <schowdary@nvidia.com>
Reviewed-by: Alexander Van Brunt <avanbrunt@nvidia.com>
Reviewed-by: Bharat Nihalani <bnihalani@nvidia.com>
Signed-off-by: Jesse Chan <jc@linux.com>
Signed-off-by: Michele Beccalossi <beccalossi.michele@gmail.com>
---
 arch/arm64/include/asm/processor.h | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/arch/arm64/include/asm/processor.h b/arch/arm64/include/asm/processor.h
index 4313a56a88b..ed467a29480 100644
--- a/arch/arm64/include/asm/processor.h
+++ b/arch/arm64/include/asm/processor.h
@@ -3,6 +3,7 @@
  *
  * Copyright (C) 1995-1999 Russell King
  * Copyright (C) 2012 ARM Ltd.
+ * Copyright (c) 2014, NVIDIA CORPORATION.  All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -33,6 +34,7 @@
 #include <asm/hw_breakpoint.h>
 #include <asm/ptrace.h>
 #include <asm/types.h>
+#include <asm/atomic.h>
 
 #ifdef __KERNEL__
 #define STACK_TOP_MAX		TASK_SIZE_64
@@ -134,6 +136,10 @@ unsigned long get_wchan(struct task_struct *p);
 #define cpu_relax()			barrier()
 #define cpu_relax_lowlatency()                cpu_relax()
 
+#define cpu_relaxed_read(p)		ldax32(p)
+#define cpu_relaxed_read_long(p)	ldax64((u64 *)p)
+#define cpu_read_relax()		wfe()
+
 /* Thread switching */
 extern struct task_struct *cpu_switch_to(struct task_struct *prev,
 					 struct task_struct *next);
@@ -171,4 +177,6 @@ static inline void spin_lock_prefetch(const void *x)
 
 void cpu_enable_pan(void);
 
+#include <asm-generic/processor.h>
+
 #endif /* __ASM_PROCESSOR_H */
-- 
2.11.0

