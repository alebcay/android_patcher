From 3d6e6684ba66a4d021fb7e6d9a335f1ce02b4e56 Mon Sep 17 00:00:00 2001
From: "xiaomei.li" <xiaomei.li@spreadtrum.com>
Date: Wed, 16 Aug 2017 10:35:02 +0800
Subject: [PATCH 34/47] Avoid the restart process for launching provider killed
 by AMS

The case is that a content provider process killed by LowmemoryKiller while the
provider launching time. And AMS will restart it for the launching provider,and
reuse the ProcessRecord, it may be killed by AMS#updateOomAdjLocked in the end
of attachApplicationLocked for empty cached process.

After that the process will restart again, and may be killed angian, another
restart, another restart...

So, we should give time for process to launch its provider, avoid the restart
and kill circle.

Test: monkey test for 10h without related issue
Change-Id: If4be91faf804493f48d3d075799576e39561ea09
Signed-off-by: Adesh15 <adesikha15@gmail.com>
---
 services/core/java/com/android/server/am/ActivityManagerService.java | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/services/core/java/com/android/server/am/ActivityManagerService.java b/services/core/java/com/android/server/am/ActivityManagerService.java
index 7d2bf8f726f..29381473554 100644
--- a/services/core/java/com/android/server/am/ActivityManagerService.java
+++ b/services/core/java/com/android/server/am/ActivityManagerService.java
@@ -7132,6 +7132,7 @@ public class ActivityManagerService extends IActivityManager.Stub
 
         mHandler.removeMessages(PROC_START_TIMEOUT_MSG, app);
 
+        boolean didSomething = false;
         boolean normalMode = mProcessesReady || isAllowedWhileBooting(app.info);
         List<ProviderInfo> providers = normalMode ? generateApplicationProvidersLocked(app) : null;
 
@@ -7139,6 +7140,7 @@ public class ActivityManagerService extends IActivityManager.Stub
             Message msg = mHandler.obtainMessage(CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG);
             msg.obj = app;
             mHandler.sendMessageDelayed(msg, CONTENT_PROVIDER_PUBLISH_TIMEOUT);
+            didSomething = true;
         }
 
         checkTime(startTime, "attachApplicationLocked: before bindApplication");
@@ -7291,7 +7293,6 @@ public class ActivityManagerService extends IActivityManager.Stub
         mProcessesOnHold.remove(app);
 
         boolean badApp = false;
-        boolean didSomething = false;
 
         // See if the top visible activity is waiting to run in this process...
         if (normalMode) {
-- 
2.11.0

