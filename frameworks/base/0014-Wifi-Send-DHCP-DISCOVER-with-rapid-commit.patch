From d5be7197bac36f8eff4dd14b3137a1f46a79c048 Mon Sep 17 00:00:00 2001
From: Vidyullatha Kanchanapally <vidyullatha@codeaurora.org>
Date: Thu, 4 May 2017 17:51:14 +0530
Subject: [PATCH 14/19] Wifi: Send DHCP DISCOVER with rapid commit

To connect with FILS enabled Wifi networks DHCP DISCOVER
need to send with rapid commit. Hence add new state in DhcpClient to
issue the same.

Change-Id: I8bbafc6046b63a3f752d02f4284849196bf43821
CRs-Fixed: 2043976
---
 services/net/java/android/net/dhcp/DhcpClient.java | 81 +++++++++++++++++++++-
 .../java/android/net/dhcp/DhcpDiscoverPacket.java  |  8 +++
 services/net/java/android/net/dhcp/DhcpPacket.java | 36 +++++++++-
 services/net/java/android/net/ip/IpManager.java    | 17 ++++-
 4 files changed, 138 insertions(+), 4 deletions(-)

diff --git a/services/net/java/android/net/dhcp/DhcpClient.java b/services/net/java/android/net/dhcp/DhcpClient.java
index ed78175bd39..4114f29f8c0 100644
--- a/services/net/java/android/net/dhcp/DhcpClient.java
+++ b/services/net/java/android/net/dhcp/DhcpClient.java
@@ -128,6 +128,9 @@ public class DhcpClient extends StateMachine {
     public static final int CMD_CONFIGURE_LINKADDRESS       = PUBLIC_BASE + 8;
     public static final int EVENT_LINKADDRESS_CONFIGURED    = PUBLIC_BASE + 9;
 
+    /* Command from controller to start DHCP with Rapid commit */
+    public static final int CMD_START_DHCP_RAPID_COMMIT     = PUBLIC_BASE + 10;
+
     /* Message.arg1 arguments to CMD_POST_DHCP_ACTION notification */
     public static final int DHCP_SUCCESS = 1;
     public static final int DHCP_FAILURE = 2;
@@ -195,6 +198,8 @@ public class DhcpClient extends StateMachine {
     private DhcpResults mDhcpLease;
     private long mDhcpLeaseExpiry;
     private DhcpResults mOffer;
+    public boolean mRapidCommit;
+    public boolean mDiscoverSent;
 
     // Milliseconds SystemClock timestamps used to record transition times to DhcpBoundState.
     private long mLastInitEnterTime;
@@ -204,6 +209,7 @@ public class DhcpClient extends StateMachine {
     private State mStoppedState = new StoppedState();
     private State mDhcpState = new DhcpState();
     private State mDhcpInitState = new DhcpInitState();
+    private State mDhcpRapidCommitInitState = new DhcpRapidCommitInitState();
     private State mDhcpSelectingState = new DhcpSelectingState();
     private State mDhcpRequestingState = new DhcpRequestingState();
     private State mDhcpHaveLeaseState = new DhcpHaveLeaseState();
@@ -214,6 +220,7 @@ public class DhcpClient extends StateMachine {
     private State mDhcpInitRebootState = new DhcpInitRebootState();
     private State mDhcpRebootingState = new DhcpRebootingState();
     private State mWaitBeforeStartState = new WaitBeforeStartState(mDhcpInitState);
+    private State mRapidCommitWaitBeforeStartState = new WaitBeforeStartState(mDhcpRapidCommitInitState);
     private State mWaitBeforeRenewalState = new WaitBeforeRenewalState(mDhcpRenewingState);
 
     private WakeupMessage makeWakeupMessage(String cmdName, int cmd) {
@@ -231,7 +238,9 @@ public class DhcpClient extends StateMachine {
         addState(mStoppedState);
         addState(mDhcpState);
             addState(mDhcpInitState, mDhcpState);
+            addState(mDhcpRapidCommitInitState, mDhcpState);
             addState(mWaitBeforeStartState, mDhcpState);
+            addState(mRapidCommitWaitBeforeStartState, mDhcpState);
             addState(mDhcpSelectingState, mDhcpState);
             addState(mDhcpRequestingState, mDhcpState);
             addState(mDhcpHaveLeaseState, mDhcpState);
@@ -420,10 +429,17 @@ public class DhcpClient extends StateMachine {
         return true;
     }
 
+    public ByteBuffer buildDiscoverWithRapidCommitPacket() {
+        startNewTransaction();
+        return DhcpPacket.buildDiscoverPacket(
+                DhcpPacket.ENCAP_L2, mTransactionId, getSecs(), mHwAddr,
+                DO_UNICAST, REQUESTED_PARAMS, mRapidCommit);
+    }
+
     private boolean sendDiscoverPacket() {
         ByteBuffer packet = DhcpPacket.buildDiscoverPacket(
                 DhcpPacket.ENCAP_L2, mTransactionId, getSecs(), mHwAddr,
-                DO_UNICAST, REQUESTED_PARAMS);
+                DO_UNICAST, REQUESTED_PARAMS, mRapidCommit);
         return transmitPacket(packet, "DHCPDISCOVER", DhcpPacket.ENCAP_L2, INADDR_BROADCAST);
     }
 
@@ -588,12 +604,75 @@ public class DhcpClient extends StateMachine {
                         transitionTo(mDhcpInitState);
                     }
                     return HANDLED;
+                case CMD_START_DHCP_RAPID_COMMIT:
+                    mRapidCommit =  message.arg1 == 1 ? true: false;
+                    mDiscoverSent = message.arg2 == 1 ? true : false;
+                    if (mRegisteredForPreDhcpNotification) {
+                        if (mRapidCommit) {
+                            transitionTo(mRapidCommitWaitBeforeStartState);
+                        } else {
+                            transitionTo(mWaitBeforeStartState);
+                        }
+                    } else {
+                        if (mRapidCommit) {
+                            transitionTo(mDhcpRapidCommitInitState);
+                        } else {
+                            transitionTo(mDhcpInitState);
+                        }
+                    }
+                    return HANDLED;
                 default:
                     return NOT_HANDLED;
             }
         }
     }
 
+    class DhcpRapidCommitInitState extends PacketRetransmittingState {
+        public DhcpRapidCommitInitState() {
+            super();
+        }
+
+        @Override
+        public void enter() {
+            super.enter();
+            if (!mDiscoverSent) {
+                startNewTransaction();
+            }
+            mLastInitEnterTime = SystemClock.elapsedRealtime();
+        }
+
+        protected boolean sendPacket() {
+            if (mDiscoverSent) {
+                mDiscoverSent = false;
+                return true;
+            }
+            return sendDiscoverPacket();
+        }
+
+        protected void receivePacket(DhcpPacket packet) {
+            if (!isValidPacket(packet)) return;
+            if (packet instanceof DhcpOfferPacket) {
+                mOffer = packet.toDhcpResults();
+                if (mOffer != null) {
+                    Log.d(TAG, "DhcpRapidCommitInitState:Got pending lease: " + mOffer);
+                    transitionTo(mDhcpRequestingState);
+                }
+            } else if ((packet instanceof DhcpAckPacket)) {
+                DhcpResults results = packet.toDhcpResults();
+                Log.d(TAG,"Received ACK in DhcpRapidCommitInitState");
+                if (results != null) {
+                    setDhcpLeaseExpiry(packet);
+                    acceptDhcpResults(results, "Confirmed");
+                    transitionTo(mConfiguringInterfaceState);
+                }
+            } else if (packet instanceof DhcpNakPacket) {
+                Log.d(TAG, "Received NAK in DhcpRapidCommitInitState, returning to INIT");
+                mOffer = null;
+                transitionTo(mDhcpInitState);
+            }
+        }
+    }
+
     class WaitBeforeStartState extends WaitBeforeOtherState {
         public WaitBeforeStartState(State otherState) {
             super();
diff --git a/services/net/java/android/net/dhcp/DhcpDiscoverPacket.java b/services/net/java/android/net/dhcp/DhcpDiscoverPacket.java
index 91e6bd6469d..f2d0c0833f5 100644
--- a/services/net/java/android/net/dhcp/DhcpDiscoverPacket.java
+++ b/services/net/java/android/net/dhcp/DhcpDiscoverPacket.java
@@ -29,6 +29,11 @@ class DhcpDiscoverPacket extends DhcpPacket {
     DhcpDiscoverPacket(int transId, short secs, byte[] clientMac, boolean broadcast) {
         super(transId, secs, INADDR_ANY, INADDR_ANY, INADDR_ANY, INADDR_ANY, clientMac, broadcast);
     }
+    DhcpDiscoverPacket(int transId, short secs, byte[] clientMac, boolean broadcast,
+                       boolean rapidCommit) {
+        super(transId, secs, INADDR_ANY, INADDR_ANY, INADDR_ANY, INADDR_ANY,
+              clientMac, broadcast, rapidCommit);
+    }
 
     public String toString() {
         String s = super.toString();
@@ -55,6 +60,9 @@ class DhcpDiscoverPacket extends DhcpPacket {
         addTlv(buffer, DHCP_CLIENT_IDENTIFIER, getClientId());
         addCommonClientTlvs(buffer);
         addTlv(buffer, DHCP_PARAMETER_LIST, mRequestedParams);
+        if (mRapidCommit) {
+            addTlv(buffer, DHCP_OPTION_RAPID_COMMIT);
+        }
         addTlvEnd(buffer);
     }
 }
diff --git a/services/net/java/android/net/dhcp/DhcpPacket.java b/services/net/java/android/net/dhcp/DhcpPacket.java
index d90a4a23597..374dad1b9de 100644
--- a/services/net/java/android/net/dhcp/DhcpPacket.java
+++ b/services/net/java/android/net/dhcp/DhcpPacket.java
@@ -254,6 +254,11 @@ public abstract class DhcpPacket {
     protected static final byte DHCP_CLIENT_IDENTIFIER = 61;
 
     /**
+     * DHCP zero-length option code: rapid commit
+     */
+    protected static final byte DHCP_OPTION_RAPID_COMMIT = 80;
+
+    /**
      * DHCP zero-length option code: pad
      */
     protected static final byte DHCP_OPTION_PAD = 0x00;
@@ -294,6 +299,11 @@ public abstract class DhcpPacket {
     protected final byte[] mClientMac;
 
     /**
+     * Whether the packet should be built with rapid commit option
+     */
+    protected boolean mRapidCommit;
+
+    /**
      * Asks the packet object to create a ByteBuffer serialization of
      * the packet for transmission.
      */
@@ -313,7 +323,7 @@ public abstract class DhcpPacket {
 
     protected DhcpPacket(int transId, short secs, Inet4Address clientIp, Inet4Address yourIp,
                          Inet4Address nextIp, Inet4Address relayIp,
-                         byte[] clientMac, boolean broadcast) {
+                         byte[] clientMac, boolean broadcast, boolean rapidCommit) {
         mTransId = transId;
         mSecs = secs;
         mClientIp = clientIp;
@@ -322,6 +332,14 @@ public abstract class DhcpPacket {
         mRelayIp = relayIp;
         mClientMac = clientMac;
         mBroadcast = broadcast;
+        mRapidCommit = rapidCommit;
+    }
+
+    protected DhcpPacket(int transId, short secs, Inet4Address clientIp, Inet4Address yourIp,
+                         Inet4Address nextIp, Inet4Address relayIp,
+                         byte[] clientMac, boolean broadcast) {
+        this(transId, secs, clientIp, yourIp, nextIp,
+                        relayIp, clientMac, broadcast, false);
     }
 
     /**
@@ -521,6 +539,14 @@ public abstract class DhcpPacket {
     }
 
     /**
+     * Adds an optional parameter not containing any payload.
+     */
+    protected static void addTlv(ByteBuffer buf, byte type) {
+        buf.put(type);
+        buf.put((byte) 0);
+    }
+
+    /**
      * Adds an optional parameter containing a single byte value.
      */
     protected static void addTlv(ByteBuffer buf, byte type, byte value) {
@@ -1173,8 +1199,14 @@ public abstract class DhcpPacket {
      */
     public static ByteBuffer buildDiscoverPacket(int encap, int transactionId,
         short secs, byte[] clientMac, boolean broadcast, byte[] expectedParams) {
+        return buildDiscoverPacket(encap, transactionId, secs, clientMac,
+                                   broadcast, expectedParams, false);
+    }
+    public static ByteBuffer buildDiscoverPacket(int encap, int transactionId,
+        short secs, byte[] clientMac, boolean broadcast, byte[] expectedParams,
+        boolean rapidCommit) {
         DhcpPacket pkt = new DhcpDiscoverPacket(
-            transactionId, secs, clientMac, broadcast);
+            transactionId, secs, clientMac, broadcast, rapidCommit);
         pkt.mRequestedParams = expectedParams;
         return pkt.buildPacket(encap, DHCP_SERVER, DHCP_CLIENT);
     }
diff --git a/services/net/java/android/net/ip/IpManager.java b/services/net/java/android/net/ip/IpManager.java
index facdb851075..3856d141544 100644
--- a/services/net/java/android/net/ip/IpManager.java
+++ b/services/net/java/android/net/ip/IpManager.java
@@ -76,6 +76,7 @@ import java.util.Set;
 import java.util.StringJoiner;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
+import java.nio.ByteBuffer;
 
 
 /**
@@ -366,6 +367,8 @@ public class IpManager extends StateMachine {
         /* package */ ApfCapabilities mApfCapabilities;
         /* package */ int mProvisioningTimeoutMs = DEFAULT_TIMEOUT_MS;
         /* package */ int mIPv6AddrGenMode = INetd.IPV6_ADDR_GEN_MODE_STABLE_PRIVACY;
+        /* package */ public boolean mRapidCommit;
+        /* package */ public boolean mDiscoverSent;
 
         public ProvisioningConfiguration() {} // used by Builder
 
@@ -378,6 +381,8 @@ public class IpManager extends StateMachine {
             mStaticIpConfig = other.mStaticIpConfig;
             mApfCapabilities = other.mApfCapabilities;
             mProvisioningTimeoutMs = other.mProvisioningTimeoutMs;
+            mRapidCommit = other.mRapidCommit;
+            mDiscoverSent = other.mDiscoverSent;
         }
 
         @Override
@@ -1238,7 +1243,12 @@ public class IpManager extends StateMachine {
             // Start DHCPv4.
             mDhcpClient = DhcpClient.makeDhcpClient(mContext, IpManager.this, mInterfaceName);
             mDhcpClient.registerForPreDhcpNotification();
-            mDhcpClient.sendMessage(DhcpClient.CMD_START_DHCP);
+            if (mConfiguration.mRapidCommit || mConfiguration.mDiscoverSent)
+                mDhcpClient.sendMessage(DhcpClient.CMD_START_DHCP_RAPID_COMMIT,
+                    (mConfiguration.mRapidCommit ? 1: 0),
+                    (mConfiguration.mDiscoverSent ? 1: 0));
+            else
+                mDhcpClient.sendMessage(DhcpClient.CMD_START_DHCP);
         }
 
         return true;
@@ -1314,6 +1324,11 @@ public class IpManager extends StateMachine {
         return (mIpReachabilityMonitor != null);
     }
 
+
+    public ByteBuffer buildDiscoverWithRapidCommitPacket() {
+        return mDhcpClient.buildDiscoverWithRapidCommitPacket();
+    }
+
     private void stopAllIP() {
         // We don't need to worry about routes, just addresses, because:
         //     - disableIpv6() will clear autoconf IPv6 routes as well, and
-- 
2.11.0

